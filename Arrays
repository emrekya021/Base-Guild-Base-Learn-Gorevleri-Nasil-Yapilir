// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract ArraysExercise {
    uint[] numbers = [1,2,3,4,5,6,7,8,9,10];
    uint[] timestamps;
    address[] senders;

    uint256 constant Y2K = 946702800;

    function getNumbers() external view returns (uint[] memory) {
        uint[] memory results = new uint[](numbers.length);
        for (uint i=0; i<numbers.length; i++) { results[i] = numbers[i]; }
        return results;
    }

    function resetNumbers() public { numbers = [1,2,3,4,5,6,7,8,9,10]; }

    function appendToNumbers(uint[] calldata _toAppend) public {
        for (uint i=0; i<_toAppend.length; i++) { numbers.push(_toAppend[i]); }
    }

    function saveTimestamp(uint _unixTimestamp) public {
        timestamps.push(_unixTimestamp);
        senders.push(msg.sender);
    }

    function afterY2K() public view returns (uint256[] memory, address[] memory) {
        uint256 n;
        for (uint i=0; i<timestamps.length; i++) if (timestamps[i] > Y2K) n++;

        uint256[] memory ts = new uint256[](n);
        address[]  memory sa = new address[](n);

        uint256 k;
        for (uint i=0; i<timestamps.length; i++) {
            if (timestamps[i] > Y2K) {
                ts[k] = timestamps[i];
                sa[k] = senders[i];
                k++;
            }
        }
        return (ts, sa);
    }

    function resetSenders() public { delete senders; }
    function resetTimestamps() public { delete timestamps; }
}
